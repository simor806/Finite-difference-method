@{
    ViewBag.Title = "2d";
    
    var jss = new System.Web.Script.Serialization.JavaScriptSerializer();
    var data = jss.Serialize(ViewBag.Data);
    var maxValue = jss.Serialize(ViewBag.MaxValue);
    var minValue = jss.Serialize(ViewBag.MinValue);
}

@model fdm.Models.FdmForTwoDimension

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" type="text/css" href="~/Content/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/app.css" />
    <script type="text/javascript" src="~/Scripts/Chart.js"></script>
    <title>MRS 2D</title>
</head>
<body>
    <div class="container container-fluid">
        <div class="row">
            <div class="col-xs-12">
                <h1><a href="@Url.Action("Index", "Home")" class="home"><span class="glyphicon glyphicon-home" aria-hidden="true"></span></a>MRS 2D w przestrzeni</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-md-3">
                <h4><span class="glyphicon glyphicon-log-in" aria-hidden="true"></span>Dane wejściowe</h4>
                @using (Html.BeginForm("fdm2D", "Home", FormMethod.Post, new { @class = "form", role = "form-horizontal" }))
                {
                    <div class="form-group">
                        @Html.Label("Liczba elementów siatki", new { @class = "col-xs-8" })
                        <div class="col-xs-4">
                            @Html.TextBoxFor(x => x.n, null, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(x => x.n)
                    </div>
                    <div class="form-group">
                        @Html.Label("Wartość brzegowa lewa", new { @class = "col-xs-8" })
                        <div class="col-xs-4">
                            @Html.TextBoxFor(x => x.boundaryValueLeft, null, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(x => x.boundaryValueLeft)
                    </div>
                    <div class="form-group">
                        @Html.Label("Wartość brzegowa górna", new { @class = "col-xs-8" })
                        <div class="col-xs-4">
                            @Html.TextBoxFor(x => x.boundaryValueTop, null, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(x => x.boundaryValueTop)
                    </div>
                    <div class="form-group">
                        @Html.Label("Wartość brzegowa prawa", new { @class = "col-xs-8" })
                        <div class="col-xs-4">
                            @Html.TextBoxFor(x => x.boundaryValueRight, null, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(x => x.boundaryValueRight)
                    </div>
                    <div class="form-group">
                        @Html.Label("Wartość brzegowa dolna", new { @class = "col-xs-8" })
                        <div class="col-xs-4">
                            @Html.TextBoxFor(x => x.boundaryValueBottom, null, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(x => x.boundaryValueBottom)
                    </div>
                    <input type="submit" value="Oblicz" class="btn btn-info" />
                }
            </div>
            <div class="col-xs-12 col-md-5 output">
                <h4><span class="glyphicon glyphicon-log-out" aria-hidden="true"></span>Dane wyjściowe</h4>
                @if (ViewBag.ViewedWithChart)
                {
                    <div class="table-responsive">
                        <table class="table">
                            @for (int i = 0; i < ViewBag.ChartData.Length; i++)
                            {
                                <tr>
                                    @foreach (double chartData in ViewBag.ChartData[i])
                                    {
                                        <td>@chartData</td>
                                    }
                                </tr>

                            }
                        </table>
                    </div>
                }
            </div>
            <div class="col-xs-12 col-md-4">
                <h4><span class="glyphicon glyphicon-stats" aria-hidden="true"></span>Wizualizacja</h4>
                <canvas id="chartCanvas" width="420" height="420"></canvas>
            </div>
        </div>

    <script type="text/javascript" src="~/Scripts/jquery-1.9.1.min.js"></script>
    <script type="text/javascript" src="~/Scripts/app.js"></script>
    <script type="text/javascript" src="~/Scripts/paper-full.min.js"></script>
    <script type="text/paperscript" canvas="chartCanvas">
    //przy zmianie ilości elementów wykres rysowany jest na nowo
    var $nInput = $('input[name=n]');
    $nInput.on('change', function(){
        var n = $nInput.val();
        project.activeLayer.removeChildren();
        drawAxis();
        if (n % 1 === 0){
            drawArea(n);
        }
    });

    //zmienne globalne
    var n = $nInput.val();
    var maxChartValue = JSON.parse(@Html.Raw(maxValue));
    var minChartValue = JSON.parse(@Html.Raw(minValue));
    var data = JSON.parse(@Html.Raw(data));
    var maxWidth = view.size.width;
    var maxHeight = view.size.height;
    var margin = 40;
    var areaSize = 300;
    var startPoint = new Point(margin, maxHeight - margin);

    //wywołanie rysowania wykresu
    drawAxis();
    drawArea(n);
    if (data) {
        drawData(n, data);
    }

    //rysowanie osi wykresu
    function drawAxis() {
        var xAxisEndPoint = new Point(maxWidth - margin, maxHeight - margin);
        var yAxisEndPoint = new Point(margin, margin);

        var xAxis = new Path.Line(startPoint, xAxisEndPoint);
        xAxis.strokeColor = 'grey';
        var yAxis = new Path.Line(startPoint, yAxisEndPoint);
        yAxis.strokeColor = 'grey';

        var arrowSides = 3;
        var arrowRadius = 10;

        var xAxisArrow = new Path.RegularPolygon(xAxisEndPoint, arrowSides, arrowRadius);
        xAxisArrow.fillColor = 'grey';
        xAxisArrow.rotate(90, xAxisEndPoint);

        var yAxisArrow = new Path.RegularPolygon(yAxisEndPoint, arrowSides, arrowRadius);
        yAxisArrow.fillColor = 'grey';
    }
    
    //rysowanie siatki
    function drawArea(n) {
        var area = new Shape.Rectangle(startPoint, startPoint + [areaSize, -areaSize]);
        area.strokeColor = 'black';

        var areaStep = areaSize / n;

        for (var i = 1; i < n; i++) {
            var from = startPoint - [0, i * areaStep];
            var to = from + [areaSize, 0];
            var areaHorizontalLine = new Path.Line(from, to);
            areaHorizontalLine.strokeColor = 'black';
        }

        for (var i = 1; i < n; i++) {
            var from = startPoint + [i * areaStep, 0];
            var to = from - [0, areaSize];
            var areaVerticalLine = new Path.Line(from, to);
            areaVerticalLine.strokeColor = 'black';
        }
    }

    //wizualizacja danych
    function drawData(n, data) {
        var areaStep = areaSize / n;
        var rectSize = new Size(areaStep, areaStep);

        for (var i = 0; i <= n; i++) {
            for (var j = 0, k = n; j <= n; j++, k--) {
                var centerPoint = startPoint + [i * areaStep, -j * areaStep];
                var rectPoint = centerPoint - areaStep / 2;

                var rect = new Shape.Rectangle(rectPoint, rectSize);

                var greyValue = 1 - ((data[i][k] - minChartValue) / (maxChartValue - minChartValue));
                rect.fillColor = new Color(greyValue, 0.5);

                rect.data.value = data[i][k];

                rect.onMouseEnter = function(event) {
                    this.strokeColor = '#5bc0de';
                    this.strokeWidth = 3;
                    
                    var tooltip = createTooltip(this);

                    this.onMouseLeave = function(event) {
                        this.strokeColor = null;
                        tooltip.remove();
                    }
                }

                var circle = new Shape.Circle(centerPoint, 2);
                circle.fillColor = 'black';
            }
        }
    }

    //rysowanie chmurek z obliczonymi wartościami
    function createTooltip(rect){
        var backgroundColor = new Color(0, 0, 0, 0.8)

        var triangle = new Path.RegularPolygon(rect.position - [0, 13], 3, 5);
        triangle.fillColor = backgroundColor;
        triangle.rotate(180, rect.position - [0, 13]);

        var rectangle = new Rectangle(rect.position - [30, 35], new Size(60, 20));

        var cornerSize = new Size(6, 6);

        var background = new Shape.Rectangle(rectangle, cornerSize);
        background.fillColor = backgroundColor;

        var text = new PointText({
            point: rect.position - [5, 20],
            fontSize: 12,
            content: rect.data.value,
            fillColor: 'white'
        });

        var tooltipGroup = new Group({
            children: [triangle, background, text]
        });

        return tooltipGroup;
    }
    </script>
</body>
</html>
